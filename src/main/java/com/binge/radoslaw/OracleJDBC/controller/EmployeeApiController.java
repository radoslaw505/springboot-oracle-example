package com.binge.radoslaw.OracleJDBC.controller;

import com.binge.radoslaw.OracleJDBC.model.Employee;
import com.binge.radoslaw.OracleJDBC.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

@Controller
@RequestMapping(path="/api")
public class EmployeeApiController {

    // @Autowired means to get the bean called employeeService
    // Which is auto-generated by Spring, we will use it to handle the data

    @Autowired
    private EmployeeRepository employeeRepository;

    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    @PostMapping(path="/add") // Map ONLY POST Requests
    @ResponseStatus(code = HttpStatus.CREATED)
    public @ResponseBody String addNewEmployee(
            @RequestParam String login
          , @RequestParam String firstName
          , @RequestParam String lastName) {

        Employee newEmployee = new Employee();

        newEmployee.setLogin(login);
        newEmployee.setFirstName(firstName);
        newEmployee.setLastName(lastName);
        employeeRepository.save(newEmployee);

        return "Success";
    }


    @GetMapping(path="/getAll")
    public @ResponseBody Iterable<Employee> getAllUEmployees() {
        // This returns a JSON or XML with the users
        return employeeRepository.findAll();
    }


    @PostMapping(path="/setOnSite")
    public @ResponseBody String setOnSite(
           @RequestParam String login) {

        try {
            Employee employeeDetachOnSite = employeeRepository.findByCurrentOn("On Site");
            Employee employeeAttachOnSite = employeeRepository.findByLogin(login);

            if (employeeDetachOnSite != null) {
                employeeDetachOnSite.setCurrentOn(null);
                employeeRepository.save(employeeDetachOnSite);
            }

            employeeAttachOnSite.setCurrentOn("On Site");
            employeeRepository.save(employeeAttachOnSite);

            return "On Site operator has been changed to: " + employeeAttachOnSite.getLogin() + ".";
        } catch (NullPointerException npex) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST, "Provide correct login", npex);
        }
    }

    @GetMapping(path="/getOnSite")
    public @ResponseBody Employee getOnSite() {
        return employeeRepository.findByCurrentOn("On Site");
    }
}
