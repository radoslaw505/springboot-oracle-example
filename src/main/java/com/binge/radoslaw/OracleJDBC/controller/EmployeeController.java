package com.binge.radoslaw.OracleJDBC.controller;

import com.binge.radoslaw.OracleJDBC.model.Employee;
import com.binge.radoslaw.OracleJDBC.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.Date;

@Controller // This means that this class is a Controller
@RequestMapping(path="/app") // This means URL's start with /demo (after Application path)
public class EmployeeController {

    @Autowired // This means to get the bean called employeeService
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmployeeRepository employeeRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewEmployee(@RequestParam String firstName
            , @RequestParam String lastName) {
//         @ResponseBody means the returned String is the response, not a view name
//         @RequestParam means it is a parameter from the GET or POST request

        Employee n = new Employee();

        n.setFirstName(firstName);
        n.setLastName(lastName);
        employeeRepository.save(n);

        return "Saved";
    }

    @GetMapping(path="/getall")
    public @ResponseBody Iterable<Employee> getAllUEmployees() {
        // This returns a JSON or XML with the users
        return employeeRepository.findAll();
    }

    @GetMapping("/showall")
    public String showAllUEmployees(Model model) {
        model.addAttribute("employees", employeeRepository.findAllByOrderByLastNameAscFirstNameAsc());
        return "employee";
    }

    @PostMapping(path="/setOnSite")
    public @ResponseBody String setOnSite(@RequestParam String login) {

        Employee employeeDetachOnSite = employeeRepository.findByCurrentOn("On Site");
        Employee employeeAttachOnSite = employeeRepository.findByLogin(login);

        if (employeeDetachOnSite != null) {
            employeeDetachOnSite.setCurrentOn(null);
            employeeRepository.save(employeeDetachOnSite);
        }

        employeeAttachOnSite.setCurrentOn("On Site");
        employeeRepository.save(employeeAttachOnSite);

        return "showall";
    }

    @GetMapping(path="/getOnSite")
    public @ResponseBody Employee getOnSite() {
        return employeeRepository.findByCurrentOn("On Site");
    }

}